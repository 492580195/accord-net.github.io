<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>PrincipalComponentAnalysis Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="PrincipalComponentAnalysis class" />
    <meta name="System.Keywords" content="Accord.Statistics.Analysis.PrincipalComponentAnalysis class" />
    <meta name="System.Keywords" content="PrincipalComponentAnalysis class, about PrincipalComponentAnalysis class" />
    <meta name="Microsoft.Help.F1" content="Accord.Statistics.Analysis.PrincipalComponentAnalysis" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis" />
    <meta name="Description" content="Principal component analysis (PCA) is a technique used to reduce multidimensional data sets to lower dimensions for analysis." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Accord.Statistics.Analysis" />
    <meta name="file" content="T_Accord_Statistics_Analysis_PrincipalComponentAnalysis" />
    <meta name="guid" content="T_Accord_Statistics_Analysis_PrincipalComponentAnalysis" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Accord.NET Framework<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Accord.NET Framework" tocid="roottoc">Accord.NET Framework</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Framework modules" tocid="R_Project_Accord_NET">Framework modules</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="N_Accord_Statistics_Analysis.htm" title="Accord.Statistics.Analysis" tocid="N_Accord_Statistics_Analysis">Accord.Statistics.Analysis</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Accord_Statistics_Analysis_PrincipalComponentAnalysis.htm" title="PrincipalComponentAnalysis Class" tocid="T_Accord_Statistics_Analysis_PrincipalComponentAnalysis">PrincipalComponentAnalysis Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Overload_Accord_Statistics_Analysis_PrincipalComponentAnalysis__ctor.htm" title="PrincipalComponentAnalysis Constructor " tocid="Overload_Accord_Statistics_Analysis_PrincipalComponentAnalysis__ctor">PrincipalComponentAnalysis Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Methods_T_Accord_Statistics_Analysis_PrincipalComponentAnalysis.htm" title="PrincipalComponentAnalysis Methods" tocid="Methods_T_Accord_Statistics_Analysis_PrincipalComponentAnalysis">PrincipalComponentAnalysis Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Properties_T_Accord_Statistics_Analysis_PrincipalComponentAnalysis.htm" title="PrincipalComponentAnalysis Properties" tocid="Properties_T_Accord_Statistics_Analysis_PrincipalComponentAnalysis">PrincipalComponentAnalysis Properties</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="logoColumn">
              <img alt="Accord.NET (logo)" src="../icons/logo.png" />
            </td>
            <td class="titleColumn">PrincipalComponentAnalysis Class</td>
          </tr>
        </table>
        <span class="introStyle"></span>
        <div class="summary">
               Principal component analysis (PCA) is a technique used to reduce
               multidimensional data sets to lower dimensions for analysis.
             </div>
        <div class="collapsibleAreaRegion">
          <span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0">
            <img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span>
        </div>
        <div id="ID0RBSection" class="collapsibleSection">
          <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST7F11AC74_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a>
          <br />  <span class="selflink">Accord.Statistics.Analysis<span id="LST7F11AC74_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>PrincipalComponentAnalysis</span><br />    <a href="T_Accord_Statistics_Analysis_KernelPrincipalComponentAnalysis.htm">Accord.Statistics.Analysis<span id="LST7F11AC74_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>KernelPrincipalComponentAnalysis</a><br /></div>
        <p> </p>
        <strong>Namespace:</strong> <a href="N_Accord_Statistics_Analysis.htm">Accord.Statistics.Analysis</a><br /><strong>Assembly:</strong> Accord.Statistics (in Accord.Statistics.dll) Version: 3.0.2<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','cs','1','2');return false;">C#</a></div><div id="ID1EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">PrincipalComponentAnalysis</span> : <span class="identifier">IProjectionAnalysis</span>, 
	<span class="identifier">IMultivariateAnalysis</span>, <span class="identifier">IAnalysis</span></pre></div><div id="ID1EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">SerializableAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">PrincipalComponentAnalysis</span>
	<span class="keyword">Implements</span> <span class="identifier">IProjectionAnalysis</span>, <span class="identifier">IMultivariateAnalysis</span>, <span class="identifier">IAnalysis</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EBCA");</script></div><p>The <span class="selflink">PrincipalComponentAnalysis</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis__ctor.htm">PrincipalComponentAnalysis(<span id="LST7F11AC74_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_3?cpp=array&lt;");</script>Double<span id="LST7F11AC74_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_4?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>)</a></td><td><div class="summary">
              Constructs a new Principal Component Analysis.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis__ctor_2.htm">PrincipalComponentAnalysis(<span id="LST7F11AC74_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_5?cpp=array&lt;");</script><span id="LST7F11AC74_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_6?cpp=array&lt;");</script>Double<span id="LST7F11AC74_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_7?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST7F11AC74_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_8?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Constructs a new Principal Component Analysis.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis__ctor_1.htm">PrincipalComponentAnalysis(<span id="LST7F11AC74_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_9?cpp=array&lt;");</script>Double<span id="LST7F11AC74_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_10?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>, AnalysisMethod)</a></td><td><div class="summary">
              Constructs a new Principal Component Analysis.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis__ctor_3.htm">PrincipalComponentAnalysis(<span id="LST7F11AC74_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_11?cpp=array&lt;");</script><span id="LST7F11AC74_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_12?cpp=array&lt;");</script>Double<span id="LST7F11AC74_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_13?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST7F11AC74_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_14?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, AnalysisMethod)</a></td><td><div class="summary">
              Constructs a new Principal Component Analysis.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Adjust.htm">Adjust(<span id="LST7F11AC74_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_15?cpp=array&lt;");</script>Double<span id="LST7F11AC74_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_16?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>, Boolean)</a></td><td><div class="summary">
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </div></td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Adjust_1.htm">Adjust(<span id="LST7F11AC74_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_17?cpp=array&lt;");</script><span id="LST7F11AC74_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_18?cpp=array&lt;");</script>Double<span id="LST7F11AC74_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_19?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST7F11AC74_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_20?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Boolean)</a></td><td><div class="summary">
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Compute.htm">Compute</a></td><td><div class="summary">
              Computes the Principal Component Analysis algorithm.
            </div></td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_CreateComponents.htm">CreateComponents</a></td><td><div class="summary">
              Creates additional information about principal components.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/bsc2ak47" target="_blank">Equals</a></td><td><div class="summary">Determines whether the specified <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a> is equal to the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/4k87zsw7" target="_blank">Finalize</a></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_FromCorrelationMatrix.htm">FromCorrelationMatrix</a></td><td><div class="summary">
              Constructs a new Principal Component Analysis from a Correlation matrix.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_FromCovarianceMatrix.htm">FromCovarianceMatrix</a></td><td><div class="summary">
              Constructs a new Principal Component Analysis from a Covariance matrix.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/zdee4b3y" target="_blank">GetHashCode</a></td><td><div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_GetNumberOfComponents.htm">GetNumberOfComponents</a></td><td><div class="summary">
              Returns the minimal number of principal components
              required to represent a given percentile of the data.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/dfwy45w9" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/57ctke0a" target="_blank">MemberwiseClone</a></td><td><div class="summary">Creates a shallow copy of the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Revert.htm">Revert</a></td><td><div class="summary">
              Reverts a set of projected data into it's original form. Complete reverse
              transformation is only possible if all components are present, and, if the
              data has been standardized, the original standard deviation and means of
              the original matrix are known.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/7bxwbwt2" target="_blank">ToString</a></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Transform.htm">Transform(<span id="LST7F11AC74_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_21?cpp=array&lt;");</script>Double<span id="LST7F11AC74_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_22?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>)</a></td><td><div class="summary">
              Projects a given matrix into principal component space.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Transform_2.htm">Transform(<span id="LST7F11AC74_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_23?cpp=array&lt;");</script>Double<span id="LST7F11AC74_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_24?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Projects a given matrix into principal component space.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Transform_4.htm">Transform(<span id="LST7F11AC74_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_25?cpp=array&lt;");</script><span id="LST7F11AC74_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_26?cpp=array&lt;");</script>Double<span id="LST7F11AC74_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_27?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST7F11AC74_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_28?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Projects a given matrix into principal component space.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Transform_1.htm">Transform(<span id="LST7F11AC74_29"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_29?cpp=array&lt;");</script>Double<span id="LST7F11AC74_30"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_30?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>, Int32)</a></td><td><div class="summary">
              Projects a given matrix into principal component space.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Transform_3.htm">Transform(<span id="LST7F11AC74_31"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_31?cpp=array&lt;");</script>Double<span id="LST7F11AC74_32"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_32?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Int32)</a></td><td><div class="summary">
              Projects a given matrix into principal component space.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Transform_5.htm">Transform(<span id="LST7F11AC74_33"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_33?cpp=array&lt;");</script><span id="LST7F11AC74_34"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_34?cpp=array&lt;");</script>Double<span id="LST7F11AC74_35"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_35?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST7F11AC74_36"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_36?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Int32)</a></td><td><div class="summary">
              Projects a given matrix into principal component space.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Math_Matrix_To__1_1.htm">To<span id="LST7F11AC74_37"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_37?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST7F11AC74_38"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F11AC74_38?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a></td><td><div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_Math_Matrix.htm">Matrix</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID6RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_ComponentMatrix.htm">ComponentMatrix</a></td><td><div class="summary">
              Gets a matrix whose columns contain the principal components. Also known as the Eigenvectors or loadings matrix.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_ComponentProportions.htm">ComponentProportions</a></td><td><div class="summary">
              The respective role each component plays in the data set.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Components.htm">Components</a></td><td><div class="summary">
              Gets the Principal Components in a object-oriented structure.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_CumulativeProportions.htm">CumulativeProportions</a></td><td><div class="summary">
              The cumulative distribution of the components proportion role. Also known
              as the cumulative energy of the principal components.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Eigenvalues.htm">Eigenvalues</a></td><td><div class="summary">
              Provides access to the Eigenvalues stored during the analysis.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Means.htm">Means</a></td><td><div class="summary">
              Gets the column mean of the source data given at method construction.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Method.htm">Method</a></td><td><div class="summary">
              Gets or sets the method used by this analysis.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Overwrite.htm">Overwrite</a></td><td><div class="summary">
              Gets or sets whether calculations will be performed overwriting
              data in the original source matrix, using less memory.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Result.htm">Result</a></td><td><div class="summary">
              Gets the resulting projection of the source
              data given on the creation of the analysis 
              into the space spawned by principal components.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_SingularValues.htm">SingularValues</a></td><td><div class="summary">
              Provides access to the Singular Values stored during the analysis.
              If a covariance method is chosen, then it will contain an empty vector.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Source.htm">Source</a></td><td><div class="summary">
              Returns the original data supplied to the analysis.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_StandardDeviations.htm">StandardDeviations</a></td><td><div class="summary">
              Gets the column standard deviations of the source data given at method construction.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
               Principal Components Analysis or the Karhunen-Loève expansion is a
               classical method for dimensionality reduction or exploratory data
               analysis.</p><p>
               Mathematically, PCA is a process that decomposes the covariance matrix of a matrix
               into two parts: Eigenvalues and column eigenvectors, whereas Singular Value Decomposition
               (SVD) decomposes a matrix per se into three parts: singular values, column eigenvectors,
               and row eigenvectors. The relationships between PCA and SVD lie in that the eigenvalues 
               are the square of the singular values and the column vectors are the same for both.</p><p>
               This class uses SVD on the data set which generally gives better numerical accuracy.</p><p>
               This class can also be bound to standard controls such as the 
               <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx">DataGridView</a>
               by setting their DataSource property to the analysis' <a href="P_Accord_Statistics_Analysis_PrincipalComponentAnalysis_Components.htm">Components</a> property.</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID8RBSection" class="collapsibleSection"><p>
                The example below shows a typical usage of the analysis. However, users
                often ask why the framework produces different values than other packages
                such as STATA or MATLAB. After the simple introductory example below, we
                will be exploring why those results are often different.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAGABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAGABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAGABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Below is the same data used on the excellent paper "Tutorial</span>
<span class="highlight-comment">//   On Principal Component Analysis", by Lindsay Smith (2002).</span>

<span class="highlight-keyword">double</span>[,] sourceMatrix = 
{
    { <span class="highlight-number">2.5</span>,  <span class="highlight-number">2.4</span> },
    { <span class="highlight-number">0.5</span>,  <span class="highlight-number">0.7</span> },
    { <span class="highlight-number">2.2</span>,  <span class="highlight-number">2.9</span> },
    { <span class="highlight-number">1.9</span>,  <span class="highlight-number">2.2</span> },
    { <span class="highlight-number">3.1</span>,  <span class="highlight-number">3.0</span> },
    { <span class="highlight-number">2.3</span>,  <span class="highlight-number">2.7</span> },
    { <span class="highlight-number">2.0</span>,  <span class="highlight-number">1.6</span> },
    { <span class="highlight-number">1.0</span>,  <span class="highlight-number">1.1</span> },
    { <span class="highlight-number">1.5</span>,  <span class="highlight-number">1.6</span> },
    { <span class="highlight-number">1.1</span>,  <span class="highlight-number">0.9</span> }
}; 

<span class="highlight-comment">// Creates the Principal Component Analysis of the given source</span>
<span class="highlight-keyword">var</span> pca = <span class="highlight-keyword">new</span> PrincipalComponentAnalysis(sourceMatrix, AnalysisMethod.Center);

<span class="highlight-comment">// Compute the Principal Component Analysis</span>
pca.Compute();

<span class="highlight-comment">// Creates a projection considering 80% of the information</span>
<span class="highlight-keyword">double</span>[,] components = pca.Transform(sourceMatrix, <span class="highlight-number">0.8</span>f, <span class="highlight-keyword">true</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAGABA");</script><p>
                A question often asked by users is "why my matrices have inverted
                signs" or "why my results differ from [another software]". In short,
                despite any differences, the results are most likely correct (unless
                you firmly believe you have found a bug; in this case, please fill 
                in a bug report). </p><p>
                The example below explores, in the same steps given in Lindsay's
                tutorial, anything that would cause any discrepancies between the
                results given by Accord.NET and results given by other softwares.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EADABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Reproducing Lindsay Smith's "Tutorial on Principal Component Analysis"</span>
<span class="highlight-comment">// using the framework's default method. The tutorial can be found online</span>
<span class="highlight-comment">// at http://www.sccg.sk/~haladova/principal_components.pdf</span>

<span class="highlight-comment">// Step 1. Get some data</span>
<span class="highlight-comment">// ---------------------</span>

<span class="highlight-keyword">double</span>[,] data = 
{
    { <span class="highlight-number">2.5</span>,  <span class="highlight-number">2.4</span> },
    { <span class="highlight-number">0.5</span>,  <span class="highlight-number">0.7</span> },
    { <span class="highlight-number">2.2</span>,  <span class="highlight-number">2.9</span> },
    { <span class="highlight-number">1.9</span>,  <span class="highlight-number">2.2</span> },
    { <span class="highlight-number">3.1</span>,  <span class="highlight-number">3.0</span> },
    { <span class="highlight-number">2.3</span>,  <span class="highlight-number">2.7</span> },
    { <span class="highlight-number">2.0</span>,  <span class="highlight-number">1.6</span> },
    { <span class="highlight-number">1.0</span>,  <span class="highlight-number">1.1</span> },
    { <span class="highlight-number">1.5</span>,  <span class="highlight-number">1.6</span> },
    { <span class="highlight-number">1.1</span>,  <span class="highlight-number">0.9</span> }
};


<span class="highlight-comment">// Step 2. Subtract the mean</span>
<span class="highlight-comment">// -------------------------</span>
<span class="highlight-comment">//   Note: The framework does this automatically. By default, the framework</span>
<span class="highlight-comment">//   uses the "Center" method, which only subtracts the mean. However, it is</span>
<span class="highlight-comment">//   also possible to remove the mean *and* divide by the standard deviation</span>
<span class="highlight-comment">//   (thus performing the correlation method) by specifying "Standardize"</span>
<span class="highlight-comment">//   instead of "Center" as the AnalysisMethod.</span>

AnalysisMethod method = AnalysisMethod.Center; <span class="highlight-comment">// AnalysisMethod.Standardize</span>


<span class="highlight-comment">// Step 3. Compute the covariance matrix</span>
<span class="highlight-comment">// -------------------------------------</span>
<span class="highlight-comment">//   Note: Accord.NET does not need to compute the covariance</span>
<span class="highlight-comment">//   matrix in order to compute PCA. The framework uses the SVD</span>
<span class="highlight-comment">//   method which is more numerically stable, but may require</span>
<span class="highlight-comment">//   more processing or memory. In order to replicate the tutorial</span>
<span class="highlight-comment">//   using covariance matrices, please see the next example below.</span>

<span class="highlight-comment">// Create the analysis using the selected method</span>
<span class="highlight-keyword">var</span> pca = <span class="highlight-keyword">new</span> PrincipalComponentAnalysis(data, method);

<span class="highlight-comment">// Compute it</span>
pca.Compute();


<span class="highlight-comment">// Step 4. Compute the eigenvectors and eigenvalues of the covariance matrix</span>
<span class="highlight-comment">// -------------------------------------------------------------------------</span>
<span class="highlight-comment">//   Note: Since Accord.NET uses the SVD method rather than the Eigendecomposition</span>
<span class="highlight-comment">//   method, the Eigenvalues are not directly available. However, it is not the</span>
<span class="highlight-comment">//   Eigenvalues themselves which are important, but rather their proportion:</span>

<span class="highlight-comment">// Those are the expected eigenvalues, in descending order:</span>
<span class="highlight-keyword">double</span>[] eigenvalues = { <span class="highlight-number">1.28402771</span>, <span class="highlight-number">0.0490833989</span> };

<span class="highlight-comment">// And this will be their proportion:</span>
<span class="highlight-keyword">double</span>[] proportion = eigenvalues.Divide(eigenvalues.Sum());

<span class="highlight-comment">// Those are the expected eigenvectors,</span>
<span class="highlight-comment">// in descending order of eigenvalues:</span>
<span class="highlight-keyword">double</span>[,] eigenvectors =
{
    { <span class="highlight-number">-0.677873399</span>, <span class="highlight-number">-0.735178656</span> },
    { <span class="highlight-number">-0.735178656</span>,  <span class="highlight-number">0.677873399</span> }
};

<span class="highlight-comment">// Now, here is the place most users get confused. The fact is that</span>
<span class="highlight-comment">// the Eigenvalue decomposition (EVD) is not unique, and both the SVD</span>
<span class="highlight-comment">// and EVD routines used by the framework produces results which are</span>
<span class="highlight-comment">// numerically different from packages such as STATA or MATLAB, but</span>
<span class="highlight-comment">// those are correct.</span>

<span class="highlight-comment">// If v is an eigenvector, a multiple of this eigenvector (such as a*v, with</span>
<span class="highlight-comment">// a being a scalar) will also be an eigenvector. In the Lindsay case, the</span>
<span class="highlight-comment">// framework produces a first eigenvector with inverted signs. This is the same</span>
<span class="highlight-comment">// as considering a=-1 and taking a*v. The result is still correct.</span>

<span class="highlight-comment">// Retrieve the first expected eigenvector</span>
<span class="highlight-keyword">double</span>[] v = eigenvectors.GetColumn(<span class="highlight-number">0</span>);

<span class="highlight-comment">// Multiply by a scalar and store it back</span>
eigenvectors.SetColumn(<span class="highlight-number">0</span>, v.Multiply(<span class="highlight-number">-1</span>));

<span class="highlight-comment">// At this point, the eigenvectors should equal the pca.ComponentMatrix,</span>
<span class="highlight-comment">// and the proportion vector should equal the pca.ComponentProportions up</span>
<span class="highlight-comment">// to the 9 decimal places shown in the tutorial.</span>


<span class="highlight-comment">// Step 5. Deriving the new data set</span>
<span class="highlight-comment">// ---------------------------------</span>

<span class="highlight-keyword">double</span>[,] actual = pca.Transform(data);

<span class="highlight-comment">// transformedData shown in pg. 18</span>
<span class="highlight-keyword">double</span>[,] expected = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[,]
{
    {  <span class="highlight-number">0.827970186</span>, <span class="highlight-number">-0.175115307</span> },
    { <span class="highlight-number">-1.77758033</span>,   <span class="highlight-number">0.142857227</span> },
    {  <span class="highlight-number">0.992197494</span>,  <span class="highlight-number">0.384374989</span> },
    {  <span class="highlight-number">0.274210416</span>,  <span class="highlight-number">0.130417207</span> },
    {  <span class="highlight-number">1.67580142</span>,  <span class="highlight-number">-0.209498461</span> },
    {  <span class="highlight-number">0.912949103</span>,  <span class="highlight-number">0.175282444</span> },
    { <span class="highlight-number">-0.099109437</span>, <span class="highlight-number">-0.349824698</span> },
    { <span class="highlight-number">-1.14457216</span>,   <span class="highlight-number">0.046417258</span> },
    { <span class="highlight-number">-0.438046137</span>,  <span class="highlight-number">0.017764629</span> },
    { <span class="highlight-number">-1.22382056</span>,  <span class="highlight-number">-0.162675287</span> },
};

<span class="highlight-comment">// At this point, the actual and expected matrices</span>
<span class="highlight-comment">// should be equal up to 8 decimal places.</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADABA");</script><p>
                Some users would like to analyze huge amounts of data. In this case,
                computing the SVD directly on the data could result in memory exceptions
                or excessive computing times. If your data's number of dimensions is much
                less than the number of observations (i.e. your matrix have less columns
                than rows) then it would be a better idea to summarize your data in the
                form of a covariance or correlation matrix and compute PCA using the EVD.</p><p>
                The example below shows how to compute the analysis with covariance
                matrices only.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Reproducing Lindsay Smith's "Tutorial on Principal Component Analysis"</span>
<span class="highlight-comment">// using the paper's original method. The tutorial can be found online</span>
<span class="highlight-comment">// at http://www.sccg.sk/~haladova/principal_components.pdf</span>

<span class="highlight-comment">// Step 1. Get some data</span>
<span class="highlight-comment">// ---------------------</span>

<span class="highlight-keyword">double</span>[,] data = 
{
    { <span class="highlight-number">2.5</span>,  <span class="highlight-number">2.4</span> },
    { <span class="highlight-number">0.5</span>,  <span class="highlight-number">0.7</span> },
    { <span class="highlight-number">2.2</span>,  <span class="highlight-number">2.9</span> },
    { <span class="highlight-number">1.9</span>,  <span class="highlight-number">2.2</span> },
    { <span class="highlight-number">3.1</span>,  <span class="highlight-number">3.0</span> },
    { <span class="highlight-number">2.3</span>,  <span class="highlight-number">2.7</span> },
    { <span class="highlight-number">2.0</span>,  <span class="highlight-number">1.6</span> },
    { <span class="highlight-number">1.0</span>,  <span class="highlight-number">1.1</span> },
    { <span class="highlight-number">1.5</span>,  <span class="highlight-number">1.6</span> },
    { <span class="highlight-number">1.1</span>,  <span class="highlight-number">0.9</span> }
};


<span class="highlight-comment">// Step 2. Subtract the mean</span>
<span class="highlight-comment">// -------------------------</span>
<span class="highlight-comment">//   Note: The framework does this automatically </span>
<span class="highlight-comment">//   when computing the covariance matrix. In this</span>
<span class="highlight-comment">//   step we will only compute the mean vector.</span>

<span class="highlight-keyword">double</span>[] mean = Accord.Statistics.Tools.Mean(data);


<span class="highlight-comment">// Step 3. Compute the covariance matrix</span>
<span class="highlight-comment">// -------------------------------------</span>

<span class="highlight-keyword">double</span>[,] covariance = Accord.Statistics.Tools.Covariance(data, mean);

<span class="highlight-comment">// Create the analysis using the covariance matrix</span>
<span class="highlight-keyword">var</span> pca = PrincipalComponentAnalysis.FromCovarianceMatrix(mean, covariance);

<span class="highlight-comment">// Compute it</span>
pca.Compute();


<span class="highlight-comment">// Step 4. Compute the eigenvectors and eigenvalues of the covariance matrix</span>
<span class="highlight-comment">//--------------------------------------------------------------------------</span>

<span class="highlight-comment">// Those are the expected eigenvalues, in descending order:</span>
<span class="highlight-keyword">double</span>[] eigenvalues = { <span class="highlight-number">1.28402771</span>, <span class="highlight-number">0.0490833989</span> };

<span class="highlight-comment">// And this will be their proportion:</span>
<span class="highlight-keyword">double</span>[] proportion = eigenvalues.Divide(eigenvalues.Sum());

<span class="highlight-comment">// Those are the expected eigenvectors,</span>
<span class="highlight-comment">// in descending order of eigenvalues:</span>
<span class="highlight-keyword">double</span>[,] eigenvectors =
{
    { <span class="highlight-number">-0.677873399</span>, <span class="highlight-number">-0.735178656</span> },
    { <span class="highlight-number">-0.735178656</span>,  <span class="highlight-number">0.677873399</span> }
};

<span class="highlight-comment">// Now, here is the place most users get confused. The fact is that</span>
<span class="highlight-comment">// the Eigenvalue decomposition (EVD) is not unique, and both the SVD</span>
<span class="highlight-comment">// and EVD routines used by the framework produces results which are</span>
<span class="highlight-comment">// numerically different from packages such as STATA or MATLAB, but</span>
<span class="highlight-comment">// those are correct.</span>

<span class="highlight-comment">// If v is an eigenvector, a multiple of this eigenvector (such as a*v, with</span>
<span class="highlight-comment">// a being a scalar) will also be an eigenvector. In the Lindsay case, the</span>
<span class="highlight-comment">// framework produces a first eigenvector with inverted signs. This is the same</span>
<span class="highlight-comment">// as considering a=-1 and taking a*v. The result is still correct.</span>

<span class="highlight-comment">// Retrieve the first expected eigenvector</span>
<span class="highlight-keyword">double</span>[] v = eigenvectors.GetColumn(<span class="highlight-number">0</span>);

<span class="highlight-comment">// Multiply by a scalar and store it back</span>
eigenvectors.SetColumn(<span class="highlight-number">0</span>, v.Multiply(<span class="highlight-number">-1</span>));

<span class="highlight-comment">// At this point, the eigenvectors should equal the pca.ComponentMatrix,</span>
<span class="highlight-comment">// and the proportion vector should equal the pca.ComponentProportions up</span>
<span class="highlight-comment">// to the 9 decimal places shown in the tutorial. Moreover, unlike the</span>
<span class="highlight-comment">// previous example, the eigenvalues vector should also be equal to the</span>
<span class="highlight-comment">// property pca.Eigenvalues.</span>


<span class="highlight-comment">// Step 5. Deriving the new data set</span>
<span class="highlight-comment">// ---------------------------------</span>

<span class="highlight-keyword">double</span>[,] actual = pca.Transform(data);

<span class="highlight-comment">// transformedData shown in pg. 18</span>
<span class="highlight-keyword">double</span>[,] expected = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[,]
{
    {  <span class="highlight-number">0.827970186</span>, <span class="highlight-number">-0.175115307</span> },
    { <span class="highlight-number">-1.77758033</span>,   <span class="highlight-number">0.142857227</span> },
    {  <span class="highlight-number">0.992197494</span>,  <span class="highlight-number">0.384374989</span> },
    {  <span class="highlight-number">0.274210416</span>,  <span class="highlight-number">0.130417207</span> },
    {  <span class="highlight-number">1.67580142</span>,  <span class="highlight-number">-0.209498461</span> },
    {  <span class="highlight-number">0.912949103</span>,  <span class="highlight-number">0.175282444</span> },
    { <span class="highlight-number">-0.099109437</span>, <span class="highlight-number">-0.349824698</span> },
    { <span class="highlight-number">-1.14457216</span>,   <span class="highlight-number">0.046417258</span> },
    { <span class="highlight-number">-0.438046137</span>,  <span class="highlight-number">0.017764629</span> },
    { <span class="highlight-number">-1.22382056</span>,  <span class="highlight-number">-0.162675287</span> },
};

<span class="highlight-comment">// At this point, the actual and expected matrices</span>
<span class="highlight-comment">// should be equal up to 8 decimal places.</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Analysis.htm">Accord.Statistics.Analysis Namespace</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>Accord.NET Framework © 2009-2015. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:feedback%40accord-framework.net?Subject=Accord.NET Framework">feedback@accord-framework.net</a></div>
      <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>
  </body>
</html>