<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>HiddenMarkovModel.Generate Method (Int32)</title>
    <meta name="Language" content="en-us" />
    <meta name="Microsoft.Help.Id" content="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Generate(System.Int32)" />
    <meta name="Description" content="Generates a random vector of observations from the model." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.Statistics.Models.Markov" />
    <meta name="file" content="M_Accord_Statistics_Models_Markov_HiddenMarkovModel_Generate" />
    <meta name="guid" content="M_Accord_Statistics_Models_Markov_HiddenMarkovModel_Generate" />
    
    <link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <table class="TitleTable">
          <tr>
            <td class="OH_tdLogoColumn">
              <img alt="Accord.NET (logo)" src="./../icons/logo.png" />
            </td>
            <td class="OH_tdTitleColumn">HiddenMarkovModel<span id="ID0EBBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBABAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Generate Method (Int32)</td>
            <td class="OH_tdRunningTitleColumn">Accord.NET Framework</td>
          </tr>
        </table>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord-framework.net/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
              Generates a random vector of observations from the model.
            </div>
            <p></p>
            <b>Namespace:</b> <a href="N_Accord_Statistics_Models_Markov.htm" target="">Accord.Statistics.Models.Markov</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.Statistics</span> (in Accord.Statistics.dll) Version: 2.12.0.0 (2.12.0.4750)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EBIDAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBIDAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBIDAAAAA_tabimgleft"></div><div id="ID0EBIDAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBIDAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBIDAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBIDAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EBIDAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBIDAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBIDAAAAA_tabimgright"></div></div><div id="ID0EBIDAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBIDAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBIDAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBIDAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBIDAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBIDAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBIDAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBIDAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="keyword">public</span> <span class="identifier">int</span>[] <span class="identifier">Generate</span>(
	<span class="identifier">int</span> <span class="parameter">samples</span>
)</pre></div><div id="ID0EBIDAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>public int[] Generate(
	int samples
)</pre></div><div id="ID0EBIDAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">Generate</span> ( 
	<span class="parameter">samples</span> <span class="keyword">As</span> <span class="identifier">Integer</span>
) <span class="keyword">As</span> <span class="identifier">Integer</span>()</pre></div><div id="ID0EBIDAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Public Function Generate ( 
	samples As Integer
) As Integer()</pre></div><div id="ID0EBIDAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBIDAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBIDAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBIDAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBIDAAAAA');</script></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramName="samples"><dt><span class="parameter">samples</span></dt><dd>Type: <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /><a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">System<span id="ID0EBCAAHDAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBCAAHDAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Int32</a><br /><span>The number of samples to generate.</span></dd></dl></div><h4 class="subHeading">Return Value</h4>Type: <span id="ID0EEDAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEDAAAAA?vb=|cpp=array&lt;|cs=|fs=|nu=");
				</script><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /><a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">Int32</a><span id="ID0ECDAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECDAAAAA?vb=()|cpp=&gt;|cs=[]|fs=[]|nu=[]");
				</script><br />A random vector of observations drawn from the model.<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="ID0EACAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EACAAAAA_tabs"></div><div id="ID0EACAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>Accord.Math.Tools.SetupGenerator(<span class="highlight-number">42</span>);

<span class="highlight-comment">// Consider some phrases:</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-keyword">string</span>[][] phrases =
{
    <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"those"</span>, <span class="highlight-literal">"are"</span>, <span class="highlight-literal">"sample"</span>, <span class="highlight-literal">"words"</span>, <span class="highlight-literal">"from"</span>, <span class="highlight-literal">"a"</span>, <span class="highlight-literal">"dictionary"</span> },
    <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"those"</span>, <span class="highlight-literal">"are"</span>, <span class="highlight-literal">"sample"</span>, <span class="highlight-literal">"words"</span> },
    <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"sample"</span>, <span class="highlight-literal">"words"</span>, <span class="highlight-literal">"are"</span>, <span class="highlight-literal">"words"</span> },
    <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"those"</span>, <span class="highlight-literal">"words"</span> },
    <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"those"</span>, <span class="highlight-literal">"are"</span>, <span class="highlight-literal">"words"</span> },
    <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"words"</span>, <span class="highlight-literal">"from"</span>, <span class="highlight-literal">"a"</span>, <span class="highlight-literal">"dictionary"</span> },
    <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"those"</span>, <span class="highlight-literal">"are"</span>, <span class="highlight-literal">"words"</span>, <span class="highlight-literal">"from"</span>, <span class="highlight-literal">"a"</span>, <span class="highlight-literal">"dictionary"</span> }
};

<span class="highlight-comment">// Let's begin by transforming them to sequence of</span> 
<span class="highlight-comment">// integer labels using a codification codebook:</span> 
<span class="highlight-keyword">var</span> codebook = <span class="highlight-keyword">new</span> Codification(<span class="highlight-literal">"Words"</span>, phrases);

<span class="highlight-comment">// Now we can create the training data for the models:</span> 
<span class="highlight-keyword">int</span>[][] sequence = codebook.Translate(<span class="highlight-literal">"Words"</span>, phrases);

<span class="highlight-comment">// To create the models, we will specify a forward topology,</span> 
<span class="highlight-comment">// as the sequences have definite start and ending points.</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-keyword">var</span> topology = <span class="highlight-keyword">new</span> Forward(states: <span class="highlight-number">4</span>);
<span class="highlight-keyword">int</span> symbols = codebook[<span class="highlight-literal">"Words"</span>].Symbols; <span class="highlight-comment">// We have 7 different words</span> 

<span class="highlight-comment">// Create the hidden Markov model</span>
HiddenMarkovModel hmm = <span class="highlight-keyword">new</span> HiddenMarkovModel(topology, symbols);

<span class="highlight-comment">// Create the learning algorithm</span>
BaumWelchLearning teacher = <span class="highlight-keyword">new</span> BaumWelchLearning(hmm);

<span class="highlight-comment">// Teach the model about the phrases</span> 
<span class="highlight-keyword">double</span> error = teacher.Run(sequence);

<span class="highlight-comment">// Now, we can ask the model to generate new samples</span> 
<span class="highlight-comment">// from the word distributions it has just learned:</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-keyword">int</span>[] sample = hmm.Generate(<span class="highlight-number">3</span>);

<span class="highlight-comment">// And the result will be: "those", "are", "words".</span> 
<span class="highlight-keyword">string</span>[] result = codebook.Translate(<span class="highlight-literal">"Words"</span>, sample);</pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Accord.Math.Tools.SetupGenerator(42);

// Consider some phrases: 
//  
string[][] phrases =
{
    new[] { "those", "are", "sample", "words", "from", "a", "dictionary" },
    new[] { "those", "are", "sample", "words" },
    new[] { "sample", "words", "are", "words" },
    new[] { "those", "words" },
    new[] { "those", "are", "words" },
    new[] { "words", "from", "a", "dictionary" },
    new[] { "those", "are", "words", "from", "a", "dictionary" }
};

// Let's begin by transforming them to sequence of 
// integer labels using a codification codebook: 
var codebook = new Codification("Words", phrases);

// Now we can create the training data for the models: 
int[][] sequence = codebook.Translate("Words", phrases);

// To create the models, we will specify a forward topology, 
// as the sequences have definite start and ending points. 
//  
var topology = new Forward(states: 4);
int symbols = codebook["Words"].Symbols; // We have 7 different words 

// Create the hidden Markov model
HiddenMarkovModel hmm = new HiddenMarkovModel(topology, symbols);

// Create the learning algorithm
BaumWelchLearning teacher = new BaumWelchLearning(hmm);

// Teach the model about the phrases 
double error = teacher.Run(sequence);

// Now, we can ask the model to generate new samples 
// from the word distributions it has just learned: 
//  
int[] sample = hmm.Generate(3);

// And the result will be: "those", "are", "words". 
string[] result = codebook.Translate("Words", sample);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Models_Markov_HiddenMarkovModel.htm" target="">HiddenMarkovModel Class</a></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_Statistics_Models_Markov_HiddenMarkovModel.htm" target="">HiddenMarkovModel Members</a></div><div class="seeAlsoStyle"><a href="Overload_Accord_Statistics_Models_Markov_HiddenMarkovModel_Generate.htm" target="">Generate Overload</a></div><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Models_Markov.htm" target="">Accord.Statistics.Models.Markov Namespace</a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord-framework.net/" target="_blank">Accord.NET Framework</a> © 2009-2014. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:feedback@accord-framework.net?subject=Accord.NET+Framework+HiddenMarkovModel.Generate+Method+(Int32)+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to feedback@accord-framework.net.</div>
    </div>
  </body>
</html>