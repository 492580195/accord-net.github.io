<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>BaumWelchLearning(TDistribution) Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="BaumWelchLearning%3CTDistribution%3E class" />
    <meta name="System.Keywords" content="Accord.Statistics.Models.Markov.Learning.BaumWelchLearning%3CTDistribution%3E class" />
    <meta name="System.Keywords" content="BaumWelchLearning%3CTDistribution%3E class, about BaumWelchLearning%3CTDistribution%3E class" />
    <meta name="System.Keywords" content="BaumWelchLearning(Of TDistribution) class" />
    <meta name="System.Keywords" content="Accord.Statistics.Models.Markov.Learning.BaumWelchLearning(Of TDistribution) class" />
    <meta name="System.Keywords" content="BaumWelchLearning(Of TDistribution) class, about BaumWelchLearning(Of TDistribution) class" />
    <meta name="Microsoft.Help.F1" content="Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1" />
    <meta name="Description" content="Baum-Welch learning algorithm for arbitrary-density (generic) Hidden Markov Models." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Accord.Statistics.Models.Markov.Learning" />
    <meta name="file" content="T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1" />
    <meta name="guid" content="T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Accord.NET Framework<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Accord.NET Framework" tocid="roottoc">Accord.NET Framework</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Framework modules" tocid="R_Project_Accord_NET">Framework modules</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Accord_Statistics_Models_Markov_Learning.htm" title="Accord.Statistics.Models.Markov.Learning" tocid="N_Accord_Statistics_Models_Markov_Learning">Accord.Statistics.Models.Markov.Learning</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1.htm" title="BaumWelchLearning(TDistribution) Class" tocid="T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1">BaumWelchLearning(TDistribution) Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1__ctor.htm" title="BaumWelchLearning(TDistribution) Constructor " tocid="M_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1__ctor">BaumWelchLearning(TDistribution) Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1.htm" title="BaumWelchLearning(TDistribution) Properties" tocid="Properties_T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1">BaumWelchLearning(TDistribution) Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1.htm" title="BaumWelchLearning(TDistribution) Methods" tocid="Methods_T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1">BaumWelchLearning(TDistribution) Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="logoColumn">
              <img alt="Accord.NET (logo)" src="../icons/logo.png" />
            </td>
            <td class="titleColumn">BaumWelchLearning<span id="LSTE091D1F0_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_0?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="typeparameter">TDistribution</span><span id="LSTE091D1F0_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_1?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script> Class</td>
          </tr>
        </table>
        <span class="introStyle"></span>
        <p>
          <strong>Note: This API is now obsolete.</strong>
        </p>
        <div class="summary">
               Baum-Welch learning algorithm for <a href="T_Accord_Statistics_Models_Markov_HiddenMarkovModel_1.htm">
               arbitrary-density (generic) Hidden Markov Models</a>.
             </div>
        <div class="collapsibleAreaRegion">
          <span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0">
            <img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span>
        </div>
        <div id="ID0RBSection" class="collapsibleSection">
          <span class="nolink">System<span id="LSTE091D1F0_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</span>
          <br />  <a href="T_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning.htm">Accord.Statistics.Models.Markov.Learning<span id="LSTE091D1F0_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>BaseBaumWelchLearning</a><br />    <span class="selflink">Accord.Statistics.Models.Markov.Learning<span id="LSTE091D1F0_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>BaumWelchLearning<span id="LSTE091D1F0_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_5?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TDistribution<span id="LSTE091D1F0_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_6?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span><br /></div>
        <p> </p>
        <strong>Namespace:</strong> <a href="N_Accord_Statistics_Models_Markov_Learning.htm">Accord.Statistics.Models.Markov.Learning</a><br /><strong>Assembly:</strong> Accord.Statistics (in Accord.Statistics.dll) Version: 3.2.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','cs','1','2');return false;">C#</a></div><div id="ID1EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">ObsoleteAttribute</span>("Please use BaumWelchLearning&lt;TDistribution, TObservation&gt; instead.")]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">BaumWelchLearning</span>&lt;TDistribution&gt; : <span class="identifier">BaseBaumWelchLearning</span>, 
	<span class="identifier">IUnsupervisedLearning</span>, <span class="identifier">IConvergenceLearning</span>
<span class="keyword">where</span> TDistribution : <span class="identifier">IDistribution</span>
</pre></div><div id="ID1EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">ObsoleteAttribute</span>("Please use BaumWelchLearning&lt;TDistribution, TObservation&gt; instead.")&gt;
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">BaumWelchLearning</span>(<span class="keyword">Of</span> TDistribution <span class="keyword">As</span> <span class="identifier">IDistribution</span>)
	<span class="keyword">Inherits</span> <span class="identifier">BaseBaumWelchLearning</span>
	<span class="keyword">Implements</span> <span class="identifier">IUnsupervisedLearning</span>, <span class="identifier">IConvergenceLearning</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EBCA");</script><h4 class="subHeading">Type Parameters</h4><dl><dt><span class="parameter">TDistribution</span></dt><dd /></dl></div><p>The <span class="selflink">BaumWelchLearning<span id="LSTE091D1F0_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_7?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TDistribution<span id="LSTE091D1F0_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_8?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1__ctor.htm">BaumWelchLearning<span id="LSTE091D1F0_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_9?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TDistribution<span id="LSTE091D1F0_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_10?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary">
              Creates a new instance of the Baum-Welch learning algorithm.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1_FittingOptions.htm">FittingOptions</a></td><td><div class="summary">
              Gets or sets the distribution fitting options
              to use when estimating distribution densities
              during learning.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning_Iterations.htm">Iterations</a></td><td><div class="summary">
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </div> (Inherited from <a href="T_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning.htm">BaseBaumWelchLearning</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning_LogGamma.htm">LogGamma</a></td><td><div class="summary">
              Gets the Gamma matrix of log probabilities created during
              the last iteration of the Baum-Welch learning algorithm.
            </div> (Inherited from <a href="T_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning.htm">BaseBaumWelchLearning</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning_LogKsi.htm">LogKsi</a></td><td><div class="summary">
              Gets the Ksi matrix of log probabilities created during
              the last iteration of the Baum-Welch learning algorithm.
            </div> (Inherited from <a href="T_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning.htm">BaseBaumWelchLearning</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning_LogWeights.htm">LogWeights</a></td><td><div class="summary">
              Gets the sample weights in the last iteration of the
              Baum-Welch learning algorithm.
            </div> (Inherited from <a href="T_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning.htm">BaseBaumWelchLearning</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1_Model.htm">Model</a></td><td><div class="summary">
              Gets the model being trained.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning_Tolerance.htm">Tolerance</a></td><td><div class="summary">
              Gets or sets the maximum change in the average log-likelihood
              after an iteration of the algorithm used to detect convergence.
            </div> (Inherited from <a href="T_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning.htm">BaseBaumWelchLearning</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1_ComputeForwardBackward.htm">ComputeForwardBackward</a></td><td><div class="summary">
              Computes the forward and backward probabilities matrices
              for a given observation referenced by its index in the
              input training data.
            </div> (Overrides <a href="M_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning_ComputeForwardBackward.htm">BaseBaumWelchLearning<span id="LSTE091D1F0_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_11?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ComputeForwardBackward(Int32, <span id="LSTE091D1F0_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_12?cpp=array&lt;");</script>Double<span id="LSTE091D1F0_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_13?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>, <span id="LSTE091D1F0_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_14?cpp=array&lt;");</script>Double<span id="LSTE091D1F0_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_15?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>)</a>.)</td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1_ComputeKsi.htm">ComputeKsi</a></td><td><div class="summary">
              Computes the ksi matrix of probabilities for a given observation
              referenced by its index in the input training data.
            </div> (Overrides <a href="M_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning_ComputeKsi.htm">BaseBaumWelchLearning<span id="LSTE091D1F0_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_16?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ComputeKsi(Int32, <span id="LSTE091D1F0_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_17?cpp=array&lt;");</script>Double<span id="LSTE091D1F0_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_18?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>, <span id="LSTE091D1F0_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_19?cpp=array&lt;");</script>Double<span id="LSTE091D1F0_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_20?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>)</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">Equals</span></td><td><div class="summary">Determines whether the specified <span class="nolink">Object</span> is equal to the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">Finalize</span></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetHashCode</span></td><td><div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetType</span></td><td><div class="summary">Gets the <span class="nolink">Type</span> of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">MemberwiseClone</span></td><td><div class="summary">Creates a shallow copy of the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1_Run.htm">Run(<span id="LSTE091D1F0_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_21?cpp=array&lt;");</script>Array<span id="LSTE091D1F0_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_22?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning_Run_1.htm">Run(<span id="LSTE091D1F0_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_23?cpp=array&lt;");</script>Array<span id="LSTE091D1F0_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_24?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LSTE091D1F0_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_25?cpp=array&lt;");</script>Double<span id="LSTE091D1F0_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_26?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </div> (Inherited from <a href="T_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning.htm">BaseBaumWelchLearning</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">ToString</span></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning_1_UpdateEmissions.htm">UpdateEmissions</a></td><td><div class="summary">
              Updates the emission probability matrix.
            </div> (Overrides <a href="M_Accord_Statistics_Models_Markov_Learning_BaseBaumWelchLearning_UpdateEmissions.htm">BaseBaumWelchLearning<span id="LSTE091D1F0_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_27?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>UpdateEmissions<span id="LSTE091D1F0_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_28?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension Methods</span></div><div id="ID6RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_HasMethod.htm">HasMethod</a></td><td><div class="summary">
              Checks whether an object implements a method with the given name.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To__1.htm">To<span id="LSTE091D1F0_29"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_29?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTE091D1F0_30"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_30?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LSTE091D1F0_31"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_31?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Math_Matrix_To__1_1.htm">To<span id="LSTE091D1F0_32"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_32?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTE091D1F0_33"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_33?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LSTE091D1F0_34"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_34?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_Math_Matrix.htm">Matrix</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
               The Baum-Welch algorithm is an <a href="T_Accord_Statistics_Models_Markov_Learning_IUnsupervisedLearning.htm">unsupervised algorithm</a>
               used to learn a single hidden Markov model object from a set of observation sequences. It works
               by using a variant of the <a href="M_Accord_Statistics_Distributions_Univariate_Mixture_1_Fit_1.htm">
               Expectation-Maximization</a> algorithm to search a set of model parameters (i.e. the matrix
               of <a href="P_Accord_Statistics_Models_Markov_IHiddenMarkovModel_Transitions.htm">transition probabilities <span class="code">A</span></a>, the vector of <a href="P_Accord_Statistics_Models_Markov_HiddenMarkovModel_1_Emissions.htm">state probability distributions
               <span class="code">B</span></a>, and the <a href="P_Accord_Statistics_Models_Markov_IHiddenMarkovModel_Probabilities.htm">initial probability
               vector <span class="code">π</span></a>) that would result in a model having a high likelihood of being able 
               to <a href="M_Accord_Statistics_Models_Markov_HiddenMarkovModel_1_Generate.htm">generate</a> a set of training 
               sequences given to this algorithm.</p><p>
               For increased accuracy, this class performs all computations using log-probabilities.</p><p>
               For a more thorough explanation on <a href="T_Accord_Statistics_Models_Markov_HiddenMarkovModel.htm">hidden Markov models</a>
               with practical examples on gesture recognition, please see 
               <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko">
               Sequence Classifiers in C#, Part I: Hidden Markov Models</a> [1].</p><p>
               [1]: <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko"> 
                       http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko </a></p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID8RBSection" class="collapsibleSection"><p>
               In the following example, we will create a Continuous Hidden Markov Model using
               a univariate Normal distribution to model properly model continuous sequences.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EANEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EANEBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EANEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Create continuous sequences. In the sequences below, there</span>
<span class="highlight-comment">//  seems to be two states, one for values between 0 and 1 and</span>
<span class="highlight-comment">//  another for values between 5 and 7. The states seems to be</span>
<span class="highlight-comment">//  switched on every observation.</span>
<span class="highlight-keyword">double</span>[][] sequences = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] 
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0.1</span>, <span class="highlight-number">5.2</span>, <span class="highlight-number">0.3</span>, <span class="highlight-number">6.7</span>, <span class="highlight-number">0.1</span>, <span class="highlight-number">6.0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0.2</span>, <span class="highlight-number">6.2</span>, <span class="highlight-number">0.3</span>, <span class="highlight-number">6.3</span>, <span class="highlight-number">0.1</span>, <span class="highlight-number">5.0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0.1</span>, <span class="highlight-number">7.0</span>, <span class="highlight-number">0.1</span>, <span class="highlight-number">7.0</span>, <span class="highlight-number">0.2</span>, <span class="highlight-number">5.6</span> },
};


<span class="highlight-comment">// Specify a initial normal distribution for the samples.</span>
NormalDistribution density = <span class="highlight-keyword">new</span> NormalDistribution();

<span class="highlight-comment">// Creates a continuous hidden Markov Model with two states organized in a forward</span>
<span class="highlight-comment">//  topology and an underlying univariate Normal distribution as probability density.</span>
<span class="highlight-keyword">var</span> model = <span class="highlight-keyword">new</span> HiddenMarkovModel&lt;NormalDistribution&gt;(<span class="highlight-keyword">new</span> Ergodic(<span class="highlight-number">2</span>), density);

<span class="highlight-comment">// Configure the learning algorithms to train the sequence classifier until the</span>
<span class="highlight-comment">// difference in the average log-likelihood changes only by as little as 0.0001</span>
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> BaumWelchLearning&lt;NormalDistribution&gt;(model)
{
    Tolerance = <span class="highlight-number">0.0001</span>,
    Iterations = <span class="highlight-number">0</span>,
};

<span class="highlight-comment">// Fit the model</span>
<span class="highlight-keyword">double</span> likelihood = teacher.Run(sequences);

<span class="highlight-comment">// See the log-probability of the sequences learned</span>
<span class="highlight-keyword">double</span> a1 = model.Evaluate(<span class="highlight-keyword">new</span>[] { <span class="highlight-number">0.1</span>, <span class="highlight-number">5.2</span>, <span class="highlight-number">0.3</span>, <span class="highlight-number">6.7</span>, <span class="highlight-number">0.1</span>, <span class="highlight-number">6.0</span> }); <span class="highlight-comment">// -0.12799388666109757</span>
<span class="highlight-keyword">double</span> a2 = model.Evaluate(<span class="highlight-keyword">new</span>[] { <span class="highlight-number">0.2</span>, <span class="highlight-number">6.2</span>, <span class="highlight-number">0.3</span>, <span class="highlight-number">6.3</span>, <span class="highlight-number">0.1</span>, <span class="highlight-number">5.0</span> }); <span class="highlight-comment">// 0.01171157434400194</span>

<span class="highlight-comment">// See the log-probability of an unrelated sequence</span>
<span class="highlight-keyword">double</span> a3 = model.Evaluate(<span class="highlight-keyword">new</span>[] { <span class="highlight-number">1.1</span>, <span class="highlight-number">2.2</span>, <span class="highlight-number">1.3</span>, <span class="highlight-number">3.2</span>, <span class="highlight-number">4.2</span>, <span class="highlight-number">1.0</span> }); <span class="highlight-comment">// -298.7465244473417</span>

<span class="highlight-comment">// We can transform the log-probabilities to actual probabilities:</span>
<span class="highlight-keyword">double</span> likelihood = Math.Exp(logLikelihood);
a1 = Math.Exp(a1); <span class="highlight-comment">// 0.879</span>
a2 = Math.Exp(a2); <span class="highlight-comment">// 1.011</span>
a3 = Math.Exp(a3); <span class="highlight-comment">// 0.000</span>

<span class="highlight-comment">// We can also ask the model to decode one of the sequences. After</span>
<span class="highlight-comment">// this step the state variable will contain: { 0, 1, 0, 1, 0, 1 }</span>

<span class="highlight-keyword">int</span>[] states = model.Decode(<span class="highlight-keyword">new</span>[] { <span class="highlight-number">0.1</span>, <span class="highlight-number">5.2</span>, <span class="highlight-number">0.3</span>, <span class="highlight-number">6.7</span>, <span class="highlight-number">0.1</span>, <span class="highlight-number">6.0</span> });</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EANEBA");</script><p>
               In the following example, we will create a Discrete Hidden Markov Model
               using a Generic Discrete Probability Distribution to reproduce the same
               code example given in  documentation.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EALEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EALEBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EALEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Arbitrary-density Markov Models can operate using any</span>
<span class="highlight-comment">// probability distribution, including discrete ones. </span>

<span class="highlight-comment">// In the following example, we will try to create a</span>
<span class="highlight-comment">// Discrete Hidden Markov Model using a discrete</span>
<span class="highlight-comment">// distribution to detect if a given sequence starts</span>
<span class="highlight-comment">// with a zero and has any number of ones after that.</span>

<span class="highlight-keyword">double</span>[][] sequences = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] 
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>         },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>       },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span> },
};

<span class="highlight-comment">// Create a new Hidden Markov Model with 3 states and</span>
<span class="highlight-comment">//  a generic discrete distribution with two symbols</span>
<span class="highlight-keyword">var</span> hmm = <span class="highlight-keyword">new</span> HiddenMarkovModel.CreateGeneric(<span class="highlight-number">3</span>, <span class="highlight-number">2</span>);

<span class="highlight-comment">// We will try to fit the model to the data until the difference in</span>
<span class="highlight-comment">//  the average log-likelihood changes only by as little as 0.0001</span>
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> BaumWelchLearning&lt;UniformDiscreteDistribution&gt;(hmm)
{ 
    Tolerance = <span class="highlight-number">0.0001</span>,
    Iterations = <span class="highlight-number">0</span> 
};

<span class="highlight-comment">// Begin model training</span>
<span class="highlight-keyword">double</span> ll = teacher.Run(sequences);


<span class="highlight-comment">// Calculate the likelihood that the given sequences originated</span>
<span class="highlight-comment">// from the model. The commented values on the right are the </span>
<span class="highlight-comment">// likelihoods computed by taking an exp(x) of the log-likelihoods</span>
<span class="highlight-comment">// returned by the Evaluate method.</span>
<span class="highlight-keyword">double</span> l1 = Math.Exp(hmm.Evaluate(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }));       <span class="highlight-comment">// 0.999</span>
<span class="highlight-keyword">double</span> l2 = Math.Exp(hmm.Evaluate(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> })); <span class="highlight-comment">// 0.916</span>

<span class="highlight-comment">// Sequences which do not start with zero have much lesser probability.</span>
<span class="highlight-keyword">double</span> l3 = Math.Exp(hmm.Evaluate(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }));       <span class="highlight-comment">// 0.000</span>
<span class="highlight-keyword">double</span> l4 = Math.Exp(hmm.Evaluate(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> })); <span class="highlight-comment">// 0.000</span>

<span class="highlight-comment">// Sequences which contains few errors have higher probability</span>
<span class="highlight-comment">//  than the ones which do not start with zero. This shows some</span>
<span class="highlight-comment">//  of the temporal elasticity and error tolerance of the HMMs.</span>
<span class="highlight-keyword">double</span> l5 = Math.Exp(hmm.Evaluate(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> })); <span class="highlight-comment">// 0.034</span>
<span class="highlight-keyword">double</span> l6 = Math.Exp(hmm.Evaluate(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> })); <span class="highlight-comment">// 0.034</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EALEBA");</script><p>
               The next example shows how to create a multivariate model using
               a multivariate normal distribution. In this example, sequences
               contain vector-valued observations, such as in the case of (x,y)
               pairs.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAJEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAJEBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAJEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Create sequences of vector-valued observations. In the</span>
<span class="highlight-comment">// sequence below, a single observation is composed of two</span>
<span class="highlight-comment">// coordinate values, such as (x, y). There seems to be two</span>
<span class="highlight-comment">// states, one for (x,y) values less than (5,5) and another</span>
<span class="highlight-comment">// for higher values. The states seems to be switched on</span>
<span class="highlight-comment">// every observation.</span>
<span class="highlight-keyword">double</span>[][][] sequences =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] <span class="highlight-comment">// sequence 1</span>
    {
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">2</span> }, <span class="highlight-comment">// observation 1 of sequence 1</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">6</span>, <span class="highlight-number">7</span> }, <span class="highlight-comment">// observation 2 of sequence 1</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">3</span> }, <span class="highlight-comment">// observation 3 of sequence 1</span>
    },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] <span class="highlight-comment">// sequence 2</span>
    {
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">2</span> }, <span class="highlight-comment">// observation 1 of sequence 2</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">9</span>, <span class="highlight-number">8</span> }, <span class="highlight-comment">// observation 2 of sequence 2</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">// observation 3 of sequence 2</span>
    },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] <span class="highlight-comment">// sequence 3</span>
    {
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">3</span> }, <span class="highlight-comment">// observation 1 of sequence 3</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">8</span>, <span class="highlight-number">9</span> }, <span class="highlight-comment">// observation 2 of sequence 3</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">3</span>, <span class="highlight-number">3</span> }, <span class="highlight-comment">// observation 3 of sequence 3</span>
    },
};


<span class="highlight-comment">// Specify a initial normal distribution for the samples.</span>
<span class="highlight-keyword">var</span> density = <span class="highlight-keyword">new</span> MultivariateNormalDistribution(dimension: <span class="highlight-number">2</span>);

<span class="highlight-comment">// Creates a continuous hidden Markov Model with two states organized in a forward</span>
<span class="highlight-comment">//  topology and an underlying univariate Normal distribution as probability density.</span>
<span class="highlight-keyword">var</span> model = <span class="highlight-keyword">new</span> HiddenMarkovModel&lt;MultivariateNormalDistribution&gt;(<span class="highlight-keyword">new</span> Forward(<span class="highlight-number">2</span>), density);

<span class="highlight-comment">// Configure the learning algorithms to train the sequence classifier until the</span>
<span class="highlight-comment">// difference in the average log-likelihood changes only by as little as 0.0001</span>
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> BaumWelchLearning&lt;MultivariateNormalDistribution&gt;(model)
{
    Tolerance = <span class="highlight-number">0.0001</span>,
    Iterations = <span class="highlight-number">0</span>,
};

<span class="highlight-comment">// Fit the model</span>
<span class="highlight-keyword">double</span> logLikelihood = teacher.Run(sequences);

<span class="highlight-comment">// See the likelihood of the sequences learned</span>
<span class="highlight-keyword">double</span> a1 = Math.Exp(model.Evaluate(<span class="highlight-keyword">new</span> [] { 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">2</span> }, 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">6</span>, <span class="highlight-number">7</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">3</span> }})); <span class="highlight-comment">// 0.000208</span>

<span class="highlight-keyword">double</span> a2 = Math.Exp(model.Evaluate(<span class="highlight-keyword">new</span> [] { 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">2</span> }, 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">9</span>, <span class="highlight-number">8</span>  },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }})); <span class="highlight-comment">// 0.0000376</span>

<span class="highlight-comment">// See the likelihood of an unrelated sequence</span>
<span class="highlight-keyword">double</span> a3 = Math.Exp(model.Evaluate(<span class="highlight-keyword">new</span> [] { 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">8</span>, <span class="highlight-number">7</span> }, 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">9</span>, <span class="highlight-number">8</span>  },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }})); <span class="highlight-comment">// 2.10 x 10^(-89)</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAJEBA");</script><p>
               The following example shows how to create a hidden Markov model
               that considers each feature to be independent of each other. This
               is the same as following Bayes' assumption of independence for each
               feature in the feature vector.
             </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAHEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAHEBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAHEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Let's say we have 2 meteorological sensors gathering data</span>
<span class="highlight-comment">// from different time periods of the day. Those periods are</span>
<span class="highlight-comment">// represented below:</span>

<span class="highlight-keyword">double</span>[][][] data =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] <span class="highlight-comment">// first sequence (we just repeated the measurements </span>
    {              <span class="highlight-comment">//  once, so there is only one observation sequence)</span>

        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">2</span> }, <span class="highlight-comment">// Day 1, 15:00 pm</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">6</span>, <span class="highlight-number">7</span> }, <span class="highlight-comment">// Day 1, 16:00 pm</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">3</span> }, <span class="highlight-comment">// Day 1, 17:00 pm</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">2</span> }, <span class="highlight-comment">// Day 1, 18:00 pm</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">9</span>, <span class="highlight-number">8</span> }, <span class="highlight-comment">// Day 1, 19:00 pm</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">// Day 1, 20:00 pm</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">3</span> }, <span class="highlight-comment">// Day 1, 21:00 pm</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">8</span>, <span class="highlight-number">9</span> }, <span class="highlight-comment">// Day 1, 22:00 pm</span>
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">3</span>, <span class="highlight-number">3</span> }, <span class="highlight-comment">// Day 1, 23:00 pm</span>
    }
};

<span class="highlight-comment">// Let's assume those sensors are unrelated (for simplicity). As</span>
<span class="highlight-comment">// such, let's assume the data gathered from the sensors may reside</span>
<span class="highlight-comment">// into circular centroids denoting each state the underlying system</span>
<span class="highlight-comment">// might be in.</span>
NormalDistribution[] initial_components = 
{
    <span class="highlight-keyword">new</span> NormalDistribution(), <span class="highlight-comment">// initial value for the first variable's distribution</span>
    <span class="highlight-keyword">new</span> NormalDistribution()  <span class="highlight-comment">// initial value for the second variable's distribution</span>
};

<span class="highlight-comment">// Specify a initial independent normal distribution for the samples.</span>
<span class="highlight-keyword">var</span> density = <span class="highlight-keyword">new</span> Independent&lt;NormalDistribution&gt;(initial_components);

<span class="highlight-comment">// Creates a continuous hidden Markov Model with two states organized in an Ergodic</span>
<span class="highlight-comment">//  topology and an underlying independent Normal distribution as probability density.</span>
<span class="highlight-keyword">var</span> model = <span class="highlight-keyword">new</span> HiddenMarkovModel&lt;Independent&lt;NormalDistribution&gt;&gt;(<span class="highlight-keyword">new</span> Ergodic(<span class="highlight-number">2</span>), density);

<span class="highlight-comment">// Configure the learning algorithms to train the sequence classifier until the</span>
<span class="highlight-comment">// difference in the average log-likelihood changes only by as little as 0.0001</span>
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> BaumWelchLearning&lt;Independent&lt;NormalDistribution&gt;&gt;(model)
{
    Tolerance = <span class="highlight-number">0.0001</span>,
    Iterations = <span class="highlight-number">0</span>,
};

<span class="highlight-comment">// Fit the model</span>
<span class="highlight-keyword">double</span> error = teacher.Run(data);

<span class="highlight-comment">// Get the hidden state associated with each observation</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">double</span> logLikelihood; <span class="highlight-comment">// log-likelihood of the Viterbi path</span>
<span class="highlight-keyword">int</span>[] hidden_states = model.Decode(data[<span class="highlight-number">0</span>], <span class="highlight-keyword">out</span> logLikelihood);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAHEBA");</script><p>
               Finally, the last example shows how to fit a mixture-density
               hidden Markov models.
             </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAFEBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Suppose we have a set of six sequences and we would like to</span>
<span class="highlight-comment">// fit a hidden Markov model with mixtures of Normal distributions</span>
<span class="highlight-comment">// as the emission densities. </span>

<span class="highlight-comment">// First, let's consider a set of univariate sequences:</span>
<span class="highlight-keyword">double</span>[][] sequences =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">3</span>, <span class="highlight-number">3</span>, <span class="highlight-number">3</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">3</span>, <span class="highlight-number">3</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">3</span>, <span class="highlight-number">3</span>, <span class="highlight-number">5</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">3</span>, <span class="highlight-number">3</span>, <span class="highlight-number">3</span>, <span class="highlight-number">4</span>, <span class="highlight-number">5</span>, <span class="highlight-number">5</span>, <span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">5</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">4</span>, <span class="highlight-number">4</span>, <span class="highlight-number">5</span> },
};


<span class="highlight-comment">// Now we can begin specifying a initial Gaussian mixture distribution. It is</span>
<span class="highlight-comment">// better to add some different initial parameters to the mixture components:</span>
<span class="highlight-keyword">var</span> density = <span class="highlight-keyword">new</span> Mixture&lt;NormalDistribution&gt;(
    <span class="highlight-keyword">new</span> NormalDistribution(mean: <span class="highlight-number">2</span>, stdDev: <span class="highlight-number">1.0</span>), <span class="highlight-comment">// 1st component in the mixture</span>
    <span class="highlight-keyword">new</span> NormalDistribution(mean: <span class="highlight-number">0</span>, stdDev: <span class="highlight-number">0.6</span>), <span class="highlight-comment">// 2nd component in the mixture</span>
    <span class="highlight-keyword">new</span> NormalDistribution(mean: <span class="highlight-number">4</span>, stdDev: <span class="highlight-number">0.4</span>), <span class="highlight-comment">// 3rd component in the mixture</span>
    <span class="highlight-keyword">new</span> NormalDistribution(mean: <span class="highlight-number">6</span>, stdDev: <span class="highlight-number">1.1</span>)  <span class="highlight-comment">// 4th component in the mixture</span>
);

<span class="highlight-comment">// Let's then create a continuous hidden Markov Model with two states organized in a forward</span>
<span class="highlight-comment">//  topology with the underlying univariate Normal mixture distribution as probability density.</span>
<span class="highlight-keyword">var</span> model = <span class="highlight-keyword">new</span> HiddenMarkovModel&lt;Mixture&lt;NormalDistribution&gt;&gt;(<span class="highlight-keyword">new</span> Forward(<span class="highlight-number">2</span>), density);

<span class="highlight-comment">// Now we should configure the learning algorithms to train the sequence classifier. We will</span>
<span class="highlight-comment">// learn until the difference in the average log-likelihood changes only by as little as 0.0001</span>
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> BaumWelchLearning&lt;Mixture&lt;NormalDistribution&gt;&gt;(model)
{
    Tolerance = <span class="highlight-number">0.0001</span>,
    Iterations = <span class="highlight-number">0</span>,

    <span class="highlight-comment">// Note, however, that since this example is extremely simple and we have only a few</span>
    <span class="highlight-comment">// data points, a full-blown mixture wouldn't really be needed. Thus we will have a</span>
    <span class="highlight-comment">// great chance that the mixture would become degenerated quickly. We can avoid this</span>
    <span class="highlight-comment">// by specifying some regularization constants in the Normal distribution fitting:</span>

    FittingOptions = <span class="highlight-keyword">new</span> MixtureOptions()
    {
        Iterations = <span class="highlight-number">1</span>, <span class="highlight-comment">// limit the inner e-m to a single iteration</span>

        InnerOptions = <span class="highlight-keyword">new</span> NormalOptions()
        {
            Regularization = <span class="highlight-number">1</span>e<span class="highlight-number">-5</span> <span class="highlight-comment">// specify a regularization constant</span>

            <span class="highlight-comment">// Please note that specifying a regularization constant avoids getting the exception</span>
            <span class="highlight-comment">// "Variance is zero. Try specifying a regularization constant in the fitting options."</span>
        }
    }
};

<span class="highlight-comment">// Finally, we can fit the model</span>
<span class="highlight-keyword">double</span> logLikelihood = teacher.Run(sequences);

<span class="highlight-comment">// And now check the likelihood of some approximate sequences.</span>
<span class="highlight-keyword">double</span> a1 = Math.Exp(model.Evaluate(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">3</span> })); <span class="highlight-comment">// 2.3413833128741038E+45</span>
<span class="highlight-keyword">double</span> a2 = Math.Exp(model.Evaluate(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">5</span>, <span class="highlight-number">5</span> })); <span class="highlight-comment">// 9.94607618459872E+19</span>

<span class="highlight-comment">// We can see that the likelihood of an unrelated sequence is much smaller:</span>
<span class="highlight-keyword">double</span> a3 = Math.Exp(model.Evaluate(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">8</span>, <span class="highlight-number">2</span>, <span class="highlight-number">6</span>, <span class="highlight-number">4</span>, <span class="highlight-number">1</span> })); <span class="highlight-comment">// 1.5063654166181737E-44</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFEBA");</script><p>
               When using Normal distributions, it is often the case we might find problems
               which are difficult to solve. Some problems may include constant variables or
               other numerical difficulties preventing a the proper estimation of a Normal 
               distribution from the data. </p><p> 
               A sign of those difficulties arises when the learning algorithm throws the exception
               <span class="code">"Variance is zero. Try specifying a regularization constant in the fitting options"</span> 
               for univariate distributions (e.g. <a href="T_Accord_Statistics_Distributions_Univariate_NormalDistribution.htm">NormalDistribution</a> or a <a href="T_Accord_NonPositiveDefiniteMatrixException.htm">NonPositiveDefiniteMatrixException</a> informing that the <span class="code">"Covariance matrix
               is not positive definite. Try specifying a regularization constant in the fitting options"</span>
               for multivariate distributions like the <a href="T_Accord_Statistics_Distributions_Multivariate_MultivariateNormalDistribution.htm">MultivariateNormalDistribution</a>.
               In both cases, this is an indication that the variables being learned can not be suitably 
               modeled by Normal distributions. To avoid numerical difficulties when estimating those
               probabilities, a small regularization constant can be added to the variances or to the
               covariance matrices until they become greater than zero or positive definite.</p><p>
               To specify a regularization constant as given in the above message, we 
               can indicate a fitting options object for the model distribution using:
             </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EABEBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> BaumWelchLearning&lt;NormalDistribution&gt;(model)
{
    Tolerance = <span class="highlight-number">0.0001</span>,
    Iterations = <span class="highlight-number">0</span>,

    FittingOptions = <span class="highlight-keyword">new</span> NormalOptions()
    {
        Regularization = <span class="highlight-number">1</span>e<span class="highlight-number">-5</span> <span class="highlight-comment">// specify a regularization constant</span>
    }
};</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABEBA");</script><p>
               Typically, any small value would suffice as a regularization constant,
               though smaller values may lead to longer fitting times. Too high values,
               on the other hand, would lead to decreased accuracy.</p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Models_Markov_Learning.htm">Accord.Statistics.Models.Markov.Learning Namespace</a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning.htm">Accord.Statistics.Models.Markov.Learning<span id="LSTE091D1F0_35"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_35?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>BaumWelchLearning</a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Models_Markov_HiddenMarkovModel.htm">Accord.Statistics.Models.Markov<span id="LSTE091D1F0_36"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_36?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>HiddenMarkovModel</a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Models_Markov_HiddenMarkovModel_1.htm">Accord.Statistics.Models.Markov<span id="LSTE091D1F0_37"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_37?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>HiddenMarkovModel<span id="LSTE091D1F0_38"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_38?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TDistribution<span id="LSTE091D1F0_39"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_39?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Models_Markov_Learning_BaumWelchLearning.htm">Accord.Statistics.Models.Markov.Learning<span id="LSTE091D1F0_40"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_40?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>BaumWelchLearning</a></div><div class="seeAlsoStyle"><span class="selflink">Accord.Statistics.Models.Markov.Learning<span id="LSTE091D1F0_41"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_41?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>BaumWelchLearning<span id="LSTE091D1F0_42"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_42?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TDistribution<span id="LSTE091D1F0_43"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE091D1F0_43?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>Accord.NET Framework © 2009-2016. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:feedback%40accord-framework.net?Subject=Accord.NET Framework">feedback@accord-framework.net</a></div>
      <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>
  </body>
</html>