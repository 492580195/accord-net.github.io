<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>DynamicTimeWarping Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="DynamicTimeWarping class" />
    <meta name="System.Keywords" content="Accord.Statistics.Kernels.DynamicTimeWarping class" />
    <meta name="System.Keywords" content="DynamicTimeWarping class, about DynamicTimeWarping class" />
    <meta name="Microsoft.Help.F1" content="Accord.Statistics.Kernels.DynamicTimeWarping" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Statistics.Kernels.DynamicTimeWarping" />
    <meta name="Description" content="Dynamic Time Warping Sequence Kernel." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.Statistics.Kernels" />
    <meta name="file" content="T_Accord_Statistics_Kernels_DynamicTimeWarping" />
    <meta name="guid" content="T_Accord_Statistics_Kernels_DynamicTimeWarping" />
    
    <link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <table class="TitleTable">
          <tr>
            <td class="OH_tdLogoColumn">
              <img alt="Accord.NET (logo)" src="./../icons/logo.png" />
            </td>
            <td class="OH_tdTitleColumn">DynamicTimeWarping Class</td>
            <td class="OH_tdRunningTitleColumn">Accord.NET Framework</td>
          </tr>
        </table>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord-framework.net/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
               Dynamic Time Warping Sequence Kernel.
             </div>
            <div class="OH_CollapsibleAreaRegion">
              <div class="OH_regiontitle">Inheritance Hierarchy</div>
              <div class="OH_CollapsibleArea_HrDiv">
                <hr class="OH_CollapsibleArea_Hr" />
              </div>
            </div>
            <div class="OH_clear"></div>
            <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
            <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="ID0EBEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBEOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Object</a>
            <br />  <span class="selflink">Accord.Statistics.Kernels<span id="ID0EBBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>DynamicTimeWarping</span><br /><p></p><b>Namespace:</b> <a href="N_Accord_Statistics_Kernels.htm" target="">Accord.Statistics.Kernels</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.Statistics</span> (in Accord.Statistics.dll) Version: 2.12.0.0 (2.12.0.4750)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EBAEAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBAEAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBAEAAAAA_tabimgleft"></div><div id="ID0EBAEAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAEAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBAEAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAEAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EBAEAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBAEAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBAEAAAAA_tabimgright"></div></div><div id="ID0EBAEAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBAEAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBAEAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBAEAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBAEAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBAEAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBAEAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBAEAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">DynamicTimeWarping</span> : <span class="identifier">IKernel</span>, 
	<span class="identifier">ICloneable</span>, <span class="identifier">IDisposable</span></pre></div><div id="ID0EBAEAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>[SerializableAttribute]
public class DynamicTimeWarping : IKernel, 
	ICloneable, IDisposable</pre></div><div id="ID0EBAEAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>&lt;<span class="identifier">SerializableAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">DynamicTimeWarping</span> 
	<span class="keyword">Implements</span> <span class="identifier">IKernel</span>, <span class="identifier">ICloneable</span>, <span class="identifier">IDisposable</span></pre></div><div id="ID0EBAEAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>&lt;SerializableAttribute&gt;
Public Class DynamicTimeWarping 
	Implements IKernel, ICloneable, IDisposable</pre></div><div id="ID0EBAEAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAEAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAEAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAEAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBAEAAAAA');</script></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               The Dynamic Time Warping Sequence Kernel is a sequence kernel, accepting
               vector sequences of variable size as input. Despite the sequences being
               variable in size, the vectors contained in such sequences should have its
               size fixed and should be informed at the construction of this kernel.</p><p>
               The conversion of the DTW global distance to a dot product uses a combination
               of a technique known as spherical normalization and the polynomial kernel. The
               degree of the polynomial kernel and the alpha for the spherical normalization
               should be given at the construction of the kernel. For more information,
               please see the referenced papers shown below.</p><p>
               The use of a <a href="T_Accord_Statistics_Kernels_KernelFunctionCache.htm" target="">cache</a> is highly advisable
               when using this kernel.</p><p><ul><li>
                 V. Wan, J. Carmichael; Polynomial Dynamic Time Warping Kernel Support
                 Vector Machines for Dysarthric Speech Recognition with Sparse Training
                 Data. Interspeech'2005 - Eurospeech - 9th European Conference on Speech
                 Communication and Technology. Lisboa, 2005.</li></ul></p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               The following example demonstrates how to create and learn a Support Vector
               Machine (SVM) to recognize sequences using the Dynamic Time Warping kernel.</p><div id="ID0EACAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EACAAAAA_tabs"></div><div id="ID0EACAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Suppose you have sequences of multivariate observations, and that</span> 
<span class="highlight-comment">// those sequences could be of arbitrary length. On the other hand, </span> 
<span class="highlight-comment">// each observation have a fixed, delimited number of dimensions.</span> 

<span class="highlight-comment">// In this example, we have sequences of 3-dimensional observations. </span> 
<span class="highlight-comment">// Each sequence can have an arbitrary length, but each observation</span> 
<span class="highlight-comment">// will always have length 3:</span> 

<span class="highlight-keyword">double</span>[][][] sequences =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] <span class="highlight-comment">// first sequence</span>
    {
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">// first observation of the first sequence</span> 
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">// second observation of the first sequence</span> 
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">4</span>, <span class="highlight-number">2</span> }, <span class="highlight-comment">// third observation of the first sequence</span> 
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span> }, <span class="highlight-comment">// fourth observation of the first sequence</span>
    },

    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] <span class="highlight-comment">// second sequence (note that this sequence has a different length)</span>
    {
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">// first observation of the second sequence</span> 
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">5</span>, <span class="highlight-number">6</span> }, <span class="highlight-comment">// second observation of the second sequence</span> 
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">7</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">// third observation of the second sequence</span>
    },

    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] <span class="highlight-comment">// third sequence </span>
    {
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">8</span>, <span class="highlight-number">2</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">// first observation of the third sequence</span>
    },

    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] <span class="highlight-comment">// fourth sequence </span>
    {
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">8</span>, <span class="highlight-number">2</span>, <span class="highlight-number">5</span> }, <span class="highlight-comment">// first observation of the fourth sequence</span> 
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">5</span>, <span class="highlight-number">4</span> }, <span class="highlight-comment">// second observation of the fourth sequence</span>
    }
};

<span class="highlight-comment">// Now, we will also have different class labels associated which each </span> 
<span class="highlight-comment">// sequence. We will assign -1 to sequences whose observations start </span> 
<span class="highlight-comment">// with { 1, 1, 1 } and +1 to those that do not:</span> 

<span class="highlight-keyword">int</span>[] outputs =
{
    <span class="highlight-number">-1</span>,<span class="highlight-number">-1</span>,  <span class="highlight-comment">// First two sequences are of class -1 (those start with {1,1,1})</span> 
        <span class="highlight-number">1</span>, <span class="highlight-number">1</span>,  <span class="highlight-comment">// Last two sequences are of class +1  (don't start with {1,1,1})</span>
};

<span class="highlight-comment">// At this point, we will have to "flat" out the input sequences from double[][][]</span> 
<span class="highlight-comment">// to a double[][] so they can be properly understood by the SVMs. The problem is </span> 
<span class="highlight-comment">// that, normally, SVMs usually expect the data to be comprised of fixed-length </span> 
<span class="highlight-comment">// input vectors and associated class labels. But in this case, we will be feeding</span> 
<span class="highlight-comment">// them arbitrary-length sequences of input vectors and class labels associated with</span> 
<span class="highlight-comment">// each sequence, instead of each vector.</span> 

<span class="highlight-keyword">double</span>[][] inputs = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[sequences.Length][];
<span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; sequences.Length; i++)
    inputs[i] = Matrix.Concatenate(sequences[i]);


<span class="highlight-comment">// Now we have to setup the Dynamic Time Warping kernel. We will have to</span> 
<span class="highlight-comment">// inform the length of the fixed-length observations contained in each</span> 
<span class="highlight-comment">// arbitrary-length sequence:</span> 
<span class="highlight-comment">// </span>
DynamicTimeWarping kernel = <span class="highlight-keyword">new</span> DynamicTimeWarping(length: <span class="highlight-number">3</span>);

<span class="highlight-comment">// Now we can create the machine. When using variable-length</span> 
<span class="highlight-comment">// kernels, we will need to pass zero as the input length:</span> 
<span class="highlight-keyword">var</span> svm = <span class="highlight-keyword">new</span> KernelSupportVectorMachine(kernel, inputs: <span class="highlight-number">0</span>);


<span class="highlight-comment">// Create the Sequential Minimal Optimization learning algorithm</span> 
<span class="highlight-keyword">var</span> smo = <span class="highlight-keyword">new</span> SequentialMinimalOptimization(svm, inputs, outputs)
{
    Complexity = <span class="highlight-number">1.5</span>
};

<span class="highlight-comment">// And start learning it!</span> 
<span class="highlight-keyword">double</span> error = smo.Run(); <span class="highlight-comment">// error will be 0.0</span> 


<span class="highlight-comment">// At this point, we should have obtained an useful machine. Let's</span> 
<span class="highlight-comment">// see if it can understand a few examples it hasn't seem before:</span> 

<span class="highlight-keyword">double</span>[][] a = 
{ 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">7</span>, <span class="highlight-number">2</span>, <span class="highlight-number">5</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">5</span>, <span class="highlight-number">1</span> },
};

<span class="highlight-keyword">double</span>[][] b =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">7</span>, <span class="highlight-number">5</span>, <span class="highlight-number">2</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">4</span>, <span class="highlight-number">2</span>, <span class="highlight-number">5</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> },
};

<span class="highlight-comment">// Following the aforementioned logic, sequence (a) should be</span> 
<span class="highlight-comment">// classified as -1, and sequence (b) should be classified as +1.</span> 

<span class="highlight-keyword">int</span> resultA = System.Math.Sign(svm.Compute(Matrix.Concatenate(a))); <span class="highlight-comment">// -1</span> 
<span class="highlight-keyword">int</span> resultB = System.Math.Sign(svm.Compute(Matrix.Concatenate(b))); <span class="highlight-comment">// +1</span></pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Suppose you have sequences of multivariate observations, and that 
// those sequences could be of arbitrary length. On the other hand,  
// each observation have a fixed, delimited number of dimensions. 

// In this example, we have sequences of 3-dimensional observations.  
// Each sequence can have an arbitrary length, but each observation 
// will always have length 3: 

double[][][] sequences =
{
    new double[][] // first sequence
    {
        new double[] { 1, 1, 1 }, // first observation of the first sequence 
        new double[] { 1, 2, 1 }, // second observation of the first sequence 
        new double[] { 1, 4, 2 }, // third observation of the first sequence 
        new double[] { 2, 2, 2 }, // fourth observation of the first sequence
    },

    new double[][] // second sequence (note that this sequence has a different length)
    {
        new double[] { 1, 1, 1 }, // first observation of the second sequence 
        new double[] { 1, 5, 6 }, // second observation of the second sequence 
        new double[] { 2, 7, 1 }, // third observation of the second sequence
    },

    new double[][] // third sequence 
    {
        new double[] { 8, 2, 1 }, // first observation of the third sequence
    },

    new double[][] // fourth sequence 
    {
        new double[] { 8, 2, 5 }, // first observation of the fourth sequence 
        new double[] { 1, 5, 4 }, // second observation of the fourth sequence
    }
};

// Now, we will also have different class labels associated which each  
// sequence. We will assign -1 to sequences whose observations start  
// with { 1, 1, 1 } and +1 to those that do not: 

int[] outputs =
{
    -1,-1,  // First two sequences are of class -1 (those start with {1,1,1}) 
        1, 1,  // Last two sequences are of class +1  (don't start with {1,1,1})
};

// At this point, we will have to "flat" out the input sequences from double[][][] 
// to a double[][] so they can be properly understood by the SVMs. The problem is  
// that, normally, SVMs usually expect the data to be comprised of fixed-length  
// input vectors and associated class labels. But in this case, we will be feeding 
// them arbitrary-length sequences of input vectors and class labels associated with 
// each sequence, instead of each vector. 

double[][] inputs = new double[sequences.Length][];
for (int i = 0; i &lt; sequences.Length; i++)
    inputs[i] = Matrix.Concatenate(sequences[i]);


// Now we have to setup the Dynamic Time Warping kernel. We will have to 
// inform the length of the fixed-length observations contained in each 
// arbitrary-length sequence: 
// 
DynamicTimeWarping kernel = new DynamicTimeWarping(length: 3);

// Now we can create the machine. When using variable-length 
// kernels, we will need to pass zero as the input length: 
var svm = new KernelSupportVectorMachine(kernel, inputs: 0);


// Create the Sequential Minimal Optimization learning algorithm 
var smo = new SequentialMinimalOptimization(svm, inputs, outputs)
{
    Complexity = 1.5
};

// And start learning it! 
double error = smo.Run(); // error will be 0.0 


// At this point, we should have obtained an useful machine. Let's 
// see if it can understand a few examples it hasn't seem before: 

double[][] a = 
{ 
    new double[] { 1, 1, 1 },
    new double[] { 7, 2, 5 },
    new double[] { 2, 5, 1 },
};

double[][] b =
{
    new double[] { 7, 5, 2 },
    new double[] { 4, 2, 5 },
    new double[] { 1, 1, 1 },
};

// Following the aforementioned logic, sequence (a) should be 
// classified as -1, and sequence (b) should be classified as +1. 

int resultA = System.Math.Sign(svm.Compute(Matrix.Concatenate(a))); // -1 
int resultB = System.Math.Sign(svm.Compute(Matrix.Concatenate(b))); // +1</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_Statistics_Kernels_DynamicTimeWarping.htm" target="">DynamicTimeWarping Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Kernels.htm" target="">Accord.Statistics.Kernels Namespace</a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord-framework.net/" target="_blank">Accord.NET Framework</a> © 2009-2014. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:feedback@accord-framework.net?subject=Accord.NET+Framework+DynamicTimeWarping+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to feedback@accord-framework.net.</div>
    </div>
  </body>
</html>